&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОтображатьАктуальных = Истина;
	УстановитьГруппировку();	                                   
КонецПроцедуры                                                                                         

&НаКлиенте
Процедура УстановитьГруппировку()
	
	СтруктураСписка = Список.КомпоновщикНастроек.Настройки.Структура; 
	
	Если НЕ ГруппировкаПоКлассам Тогда
		СтруктураСписка.Очистить();	
	КонецЕсли;   
	
	ГруппировкаСписка = СтруктураСписка.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЭлементГруппировки = ГруппировкаСписка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("Класс");
	ЭлементГруппировки.Использование=ГруппировкаПоКлассам;
	Список.КомпоновщикНастроек.ЗагрузитьНастройки(Список.КомпоновщикНастроек.Настройки);  
	Элементы.Список.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура МассовыйПеревод(Команда)
	МассивСсылок = Новый Массив;
    Для каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
       Обучающийся = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока).Обучающийся;
       МассивСсылок.Добавить(Обучающийся);
   КонецЦикла;      
   
      
   ОткрытьФорму("Документ.ДвижениеОбучающихся.ФормаОбъекта",Новый Структура("Обучающиеся",МассивСсылок));

   
КонецПроцедуры


&НаКлиенте
Процедура ГруппировкаПоКлассамПриИзменении(Элемент)
	УстановитьГруппировку();
КонецПроцедуры

&НаКлиенте
Процедура ВыбывшиеПриИзменении(Элемент)
	ИзменитьЗапрос();
КонецПроцедуры

&НаКлиенте
Процедура НетДанныхПриИзменении(Элемент)
	ИзменитьЗапрос();
КонецПроцедуры               

&НаСервере
Процедура ИзменитьЗапрос()                    
	//Первая часть запроса
	ТекстЗапроса = " ВЫБРАТЬ       
							| Обуч.Ссылка КАК Обучающийся,
							| Обуч.Пол КАК Пол";
	//Стоит ли приобразовывать значения (точно ли у всех будет заполнен класс??)
	Если НЕ НетДанных И НЕ Выбывшие Тогда
		ТекстЗапроса = ТекстЗапроса + " , Движения.Класс КАК Класс ";
	Иначе
		ТекстЗапроса = ТекстЗапроса + " , ВЫБОР
							|	КОГДА Движения.Класс = ЗНАЧЕНИЕ(Справочник.Классы.ПустаяСсылка) Тогда ""Выбывшие"" 
							|	Иначе ЕСТЬNULL(Движения.Класс,""Нет данных"") 
							| КОНЕЦ КАК Класс ";
	КонецЕсли;
	
	//Вторая часть запроса
	ТекстЗапроса = ТекстЗапроса + "
							|ИЗ
							|Справочник.Обучающиеся КАК Обуч
							|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвиженияОбучающихся.СрезПоследних(&Дата, ) КАК Движения
							|	ПО Обуч.Ссылка = Движения.Обучающийся ";
	
	
	МассивУсловий = Новый Массив; 
	
	Если ОтображатьАктуальных Тогда
		Текст = " Движения.Класс <> ЗНАЧЕНИЕ(Справочник.Классы.ПустаяСсылка)"; 
		
		Если ОтборКлассДанные <> Справочники.Классы.ПустаяСсылка() Тогда
			Текст = Текст + " И Движения.Класс = &Класс";
			Список.Параметры.УстановитьЗначениеПараметра("Класс",ОтборКлассДанные);
		КонецЕсли;                                    
		МассивУсловий.Добавить(Текст);
	КонецЕсли;
    Если Выбывшие Тогда
		МассивУсловий.Добавить(" Движения.Класс = ЗНАЧЕНИЕ(Справочник.Классы.ПустаяСсылка)"); 
	КонецЕсли;                                                                               
	Если НетДанных Тогда
		МассивУсловий.Добавить(" Движения.Класс ЕСТЬ NULL ");
	КонецЕсли;
	
		
	Если МассивУсловий.Количество() <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + " ГДЕ ";
		Для I = 0 ПО МассивУсловий.Количество()-1 Цикл
			ТекстЗапроса = ТекстЗапроса + МассивУсловий[I];
			Если I <> МассивУсловий.Количество() - 1 Тогда
				ТекстЗапроса = ТекстЗапроса + " ИЛИ ";										
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекстЗапроса = ТекстЗапроса + " ГДЕ ЛОЖЬ ";	
	КонецЕсли;		
	
	
	Список.ТекстЗапроса = ТекстЗапроса;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьАктуальныхПриИзменении(Элемент)
	ИзменитьЗапрос();
КонецПроцедуры


&НаКлиенте
Процедура КлассФильтрПриИзменении(Элемент)
	ИзменитьЗапрос();
КонецПроцедуры

