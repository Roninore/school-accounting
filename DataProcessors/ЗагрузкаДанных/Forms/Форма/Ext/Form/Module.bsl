//Открытие файла
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Проводник = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Проводник.Заголовок="Выберите файл";
	Фильтр="Файл Excel(*.xlsx)|*.xlsx";//Фильтр на таблицу Excel	
	Проводник.Фильтр=Фильтр;
	Оповещение=Новый ОписаниеОповещения("ПослеВыбораФайла",ЭтотОбъект);
	Проводник.Показать(Оповещение);
КонецПроцедуры


&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы,ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.ПутьКФайлу=ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
		ПрочитатьФайл_XLSX();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбратныйВызов(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт
    Сообщить("Помещение файла " + ?(ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено, "отменено", "выполнено успешно"));
    Сообщить("Адрес во временном хранилище: " + ОписаниеПомещенногоФайла.Адрес);
    Сообщить("Имя файла: " + ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя);
    //Сообщить("Размер файла, байт: " + ОписаниеПомещенногоФайла.СсылкаНаФайл.Размер());  
	ТабДок = ПрочитатьФайл_XLSX_НаСервере(ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя, ОписаниеПомещенногоФайла.Адрес);
	
	КоличествоСтрок=ТабДок.ВысотаТаблицы;
	
	Для НомерСтроки=2 По КоличествоСтрок Цикл
		СтрокаПроверки = ПолучитьОбласть(ТабДок,НомерСтроки,1,"");
		Если СтрокаПроверки = "" Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДанных=Объект.ДанныеФайла.Добавить();
		СтрокаДанных.ФИО = ПолучитьОбласть(ТабДок,НомерСтроки,1,"");
		СтрокаДанных.ЛичноеДело = ПолучитьОбласть(ТабДок,НомерСтроки,2,"");
		СтрокаДанных.ДатаРождения = ПолучитьОбласть(ТабДок,НомерСтроки,3,"Дата");
		СтрокаДанных.Пол = ПолучитьОбласть(ТабДок,НомерСтроки,4,"Пол");
		СтрокаДанных.Адрес = ПолучитьОбласть(ТабДок,НомерСтроки,5,"");
		СтрокаДанных.ПФДО = ПолучитьОбласть(ТабДок,НомерСтроки,6,"");
		СтрокаДанных.Документ = ПолучитьОбласть(ТабДок,НомерСтроки,7,"ТипДокумента");
		СтрокаДанных.ДокументСерия = ПолучитьОбласть(ТабДок,НомерСтроки,8,"");
		СтрокаДанных.ДокументНомер = ПолучитьОбласть(ТабДок,НомерСтроки,9,"");
		СтрокаДанных.ДатаВыдачиДокумента = ПолучитьОбласть(ТабДок,НомерСтроки,10,"Дата");
		СтрокаДанных.ДокументВыдан = ПолучитьОбласть(ТабДок,НомерСтроки,11,"");
		СтрокаДанных.СНИЛС = ПолучитьОбласть(ТабДок,НомерСтроки,12,"");
		СтрокаДанных.РодительФИО = ПолучитьОбласть(ТабДок,НомерСтроки,13,"");
		СтрокаДанных.РодительДатаРождения = ПолучитьОбласть(ТабДок,НомерСтроки,14,"Дата");
		СтрокаДанных.РодительПол = ПолучитьОбласть(ТабДок,НомерСтроки,15,"Пол");
		СтрокаДанных.РодительТип = ПолучитьОбласть(ТабДок,НомерСтроки,16,"ТипРодителя");
		СтрокаДанных.РодительДокументСерия = ПолучитьОбласть(ТабДок,НомерСтроки,17,"");
		СтрокаДанных.РодительДокументНомер = ПолучитьОбласть(ТабДок,НомерСтроки,18,"");
		СтрокаДанных.РодительДокументДатаВыдачи = ПолучитьОбласть(ТабДок,НомерСтроки,19,"Дата");
		СтрокаДанных.РодительДокументВыдан = ПолучитьОбласть(ТабДок,НомерСтроки,20,"");
		СтрокаДанных.РодительСНИЛС = ПолучитьОбласть(ТабДок,НомерСтроки,21,"");
		СтрокаДанных.РодительТелефон = ПолучитьОбласть(ТабДок,НомерСтроки,22,"");
		СтрокаДанных.ЗачислениеДатаЗаполнения = ПолучитьОбласть(ТабДок,НомерСтроки,23,"Дата");
		СтрокаДанных.ЗачислениеДатаДействия = ПолучитьОбласть(ТабДок,НомерСтроки,24,"Дата");
		СтрокаДанных.ЗачислениеКласс = ПолучитьОбласть(ТабДок,НомерСтроки,25,"Класс");
		СтрокаДанных.ЗачислениеНомерПриказа = ПолучитьОбласть(ТабДок,НомерСтроки,26,"");
		СтрокаДанных.ПереводДатаЗаполнения = ПолучитьОбласть(ТабДок,НомерСтроки,27,"Дата");
		СтрокаДанных.ПереводДатаДействия = ПолучитьОбласть(ТабДок,НомерСтроки,28,"Дата");
		СтрокаДанных.ПереводКласс = ПолучитьОбласть(ТабДок,НомерСтроки,29,"Класс");
		СтрокаДанных.ПереводНомерПриказа = ПолучитьОбласть(ТабДок,НомерСтроки,30,"");
		СтрокаДанных.ПереводТипДвижения = ПолучитьОбласть(ТабДок,НомерСтроки,31,"ТипДвижения");			
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура ПрочитатьФайл_XLSX()   
	ЗавершениеОбратныйВызов = Новый ОписаниеОповещения("ЗавершениеОбратныйВызов", ЭтотОбъект);     
	НачатьПомещениеФайлаНаСервер(ЗавершениеОбратныйВызов,,,,Объект.ПутьКФайлу, ЭтотОбъект.УникальныйИдентификатор);                                                                       
	//ПрочитатьФайл_XLSX_НаСервере();
КонецПроцедуры                     


//Заполнение из файла
&НаСервере
Функция ПрочитатьФайл_XLSX_НаСервере(ИмяФайла, Адрес)
		
	ТабДок=Новый ТабличныйДокумент; 
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx");
	
	ДД = ПолучитьИзВременногоХранилища(Адрес);
	ДД.Записать(ИмяВременногоФайла);
	
	Попытка
		ТабДок.Прочитать(ИмяВременногоФайла,СпособЧтенияЗначенийТабличногоДокумента.Текст,ТипФайлаТабличногоДокумента.XLSX);
	Исключение
		Сообщение=Новый СообщениеПользователю;
		Сообщение.Текст="Не удалось прочитать указанный файл по причине: " + ОписаниеОшибки();		
		Сообщение.Сообщить();
		Возврат ТабДок;
	КонецПопытки;
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция ПолучитьОбласть(ТабДок,Строка,Колонка,Тип="")
	Область = ТабДок.ПолучитьОбласть("R"+Формат(Строка,"ЧГ=0")+"C"+Колонка).ТекущаяОбласть;
	Текст = Область.Текст;        
	Результат = Преобразовать(Текст,Тип);
	Возврат Результат;
КонецФункции

&НаСервере 
Функция Преобразовать(Строка,Тип)
	Попытка 
		Результат = "";
		Если Тип = "Дата" Тогда   
			Результат = Дата(Строка + " 0:00:01");
		ИначеЕсли Тип = "Пол" Тогда   
			Результат = Перечисления.Пол[Строка];
		ИначеЕсли Тип = "ТипДокумента" Тогда   
			Результат = Перечисления.Документы[Строка];
		ИначеЕсли Тип = "ТипРодителя" Тогда   
			Результат = Перечисления.Родители[Строка];
		ИначеЕсли Тип = "Класс" Тогда
			Результат = ПолучитьКласс(Строка);
		ИначеЕсли Тип = "ТипДвижения" Тогда
			Результат = Перечисления.ТипыДвиженияОбучающегося[Строка]; 
		ИначеЕсли Тип = "" Тогда
			Результат = Строка;						
		Иначе
			
		КонецЕсли; 
		Возврат Результат;
	Исключение
		Возврат "";		
	КонецПопытки;
	
КонецФункции


&НаСервере
Функция ПолучитьКласс(Строка)
	Результат = РегулярноеВыражение("([0-9]{1,2}).*([А-Я])",Строка);
	Если Результат.Количество() < 0 Тогда
		Возврат Справочники.Классы.ПустаяСсылка();
	КонецЕсли;
	Если Результат[0].Количество() < 3 Тогда
		Возврат Справочники.Классы.ПустаяСсылка();
	КонецЕсли;
	ЗапросКласс = Новый Запрос("ВЫБРАТЬ
	                           |	Классы.Ссылка КАК Ссылка,
	                           |	Классы.Наименование КАК Наименование
	                           |ИЗ
	                           |	Справочник.Классы КАК Классы
	                           |ГДЕ
	                           |	Классы.Параллель.Порядок = &Параллель - 1
	                           |	И Классы.Литера = &Литера");
	НомерКласса = Число(Результат[0][1]);
	ЛитераКласса = Результат[0][2];
	ЗапросКласс.УстановитьПараметр("Параллель",НомерКласса);
	ЗапросКласс.УстановитьПараметр("Литера",ЛитераКласса);
	Класс = ЗапросКласс.Выполнить().Выбрать();
	Если Класс.Следующий() Тогда
		Возврат Класс.Ссылка;	
	Иначе
		Класс = Справочники.Классы.СоздатьЭлемент();
		Класс.Наименование = Строка(НомерКласса) + " «" + ЛитераКласса +"»";
		Класс.Литера = ЛитераКласса;             
		Класс.Параллель = Перечисления.Параллели[НомерКласса-1];
		Класс.Записать();
		
		Возврат Класс.Ссылка;
	КонецЕсли;
КонецФункции


//Проведение данных в базу
&НаСервере
Процедура ПровестиДанныеНаСервере()
	МассивОбучающийся = Новый Массив;
	МассивРодитель = Новый Массив;
	МассивПриказОЗачислении = Новый Массив;
	МассивПриказОПереводе = Новый Массив;

	Для каждого СтрокаДанных Из Объект.ДанныеФайла Цикл
		МассивОбучающийся.Добавить(СтрокаДанных.ФИО);
		МассивПриказОЗачислении.Добавить(ПолучитьНомерДокумента(СтрокаДанных.ЗачислениеНомерПриказа).Число);
		МассивПриказОПереводе.Добавить(ПолучитьНомерДокумента(СтрокаДанных.ПереводНомерПриказа).Число);
		МассивРодитель.Добавить(СтрокаДанных.РодительФИО);
	КонецЦикла;
	
	ЗапросОбучающийся = Новый Запрос("ВЫБРАТЬ
	                                 |	Обучающиеся.Ссылка КАК Ссылка,
	                                 |	Обучающиеся.Наименование КАК ФИО,
	                                 |	Обучающиеся.ДатаРождения КАК ДатаРождения
	                                 |ИЗ
	                                 |	Справочник.Обучающиеся КАК Обучающиеся
	                                 |ГДЕ
	                                 |	Обучающиеся.Наименование В(&МассивОбучающийся)");     	
	ЗапросОбучающийся.УстановитьПараметр("МассивОбучающийся",МассивОбучающийся);
	РезультатЗапросОбучающийся= ЗапросОбучающийся.Выполнить();
	ТаблицаОбучающийся=РезультатЗапросОбучающийся.Выгрузить();
	
	
	
	ЗапросРодитель = Новый Запрос("ВЫБРАТЬ
	                              |	Родители.Наименование КАК ФИО,
	                              |	Родители.Ссылка КАК Ссылка,
	                              |	Родители.ДатаРождения КАК ДатаРождения
	                              |ИЗ
	                              |	Справочник.Родители КАК Родители
	                              |ГДЕ
	                              |	Родители.Наименование В(&МассивРодитель)");     	
	ЗапросРодитель.УстановитьПараметр("МассивРодитель",МассивРодитель);
	РезультатЗапросРодитель= ЗапросРодитель.Выполнить();
	ТаблицаРодитель = РезультатЗапросРодитель.Выгрузить();
	
	
	
	ЗапросПриказОЗачислении = Новый Запрос("ВЫБРАТЬ
	                                       |	ДвижениеОбучающихся.Ссылка КАК Ссылка,
	                                       |	ДвижениеОбучающихся.ДатаДействия КАК ДатаДействия,
	                                       |	ДвижениеОбучающихся.ТипДокумента КАК ТипДокумента,
	                                       |	ДвижениеОбучающихся.Номер КАК Номер
	                                       |ИЗ
	                                       |	Документ.ДвижениеОбучающихся КАК ДвижениеОбучающихся
	                                       |ГДЕ
	                                       |	ДвижениеОбучающихся.Номер В(&МассивПриказОЗачислении)
	                                       |	И ДвижениеОбучающихся.ТипДокумента = &ТипДокумента");
	ЗапросПриказОЗачислении.УстановитьПараметр("МассивПриказОЗачислении",МассивПриказОЗачислении);
	ЗапросПриказОЗачислении.УстановитьПараметр("ТипДокумента",Перечисления.ТипыДвиженияОбучающегося.ПриемНаОбучение);
	РезультатЗапросПриказОЗачислении=ЗапросПриказОЗачислении.Выполнить();
	ТаблицаПриказОЗачислении=РезультатЗапросПриказОЗачислении.Выгрузить();
	
	ЗапросПриказОПереводе = Новый Запрос("ВЫБРАТЬ
	                                     |	ДвижениеОбучающихся.Ссылка КАК Ссылка,
	                                     |	ДвижениеОбучающихся.ДатаДействия КАК ДатаДействия,
	                                     |	ДвижениеОбучающихся.ТипДокумента КАК ТипДокумента,
	                                     |	ДвижениеОбучающихся.Номер КАК Номер
	                                     |ИЗ
	                                     |	Документ.ДвижениеОбучающихся КАК ДвижениеОбучающихся
	                                     |ГДЕ
	                                     |	ДвижениеОбучающихся.Номер В(&МассивПриказОПереводе)
	                                     |	И ДвижениеОбучающихся.ТипДокумента В(&ТипДокумента)");
	ЗапросПриказОПереводе.УстановитьПараметр("МассивПриказОПереводе",МассивПриказОПереводе);
	ТипыПриказовОПереводе = Новый Массив();
	ТипыПриказовОПереводе.Добавить(Перечисления.ТипыДвиженияОбучающегося.НовыйУчебныйГод);
	ТипыПриказовОПереводе.Добавить(Перечисления.ТипыДвиженияОбучающегося.ПереходМеждуКлассами);
	ЗапросПриказОПереводе.УстановитьПараметр("ТипДокумента",ТипыПриказовОПереводе);
	ЗапросПриказОПереводе.УстановитьПараметр("МассивПриказОПереводе",МассивПриказОПереводе);
	РезультатЗапросПриказОПереводе =ЗапросПриказОПереводе.Выполнить();
	ТаблицаПриказОПереводе = РезультатЗапросПриказОПереводе.Выгрузить();
	
	Для каждого СтрокаДанных Из Объект.ДанныеФайла Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("ФИО",СтрокаДанных.ФИО);
		Отбор.Вставить("ДатаРождения",СтрокаДанных.ДатаРождения);
		НайденныйОбучающийся = ТаблицаОбучающийся.НайтиСтроки(Отбор);
		Если НайденныйОбучающийся<>Неопределено Тогда
			Если НайденныйОбучающийся.Количество() Тогда
				Сообщить("Строка " + СтрокаДанных.НомерСтроки + " Обучающийся " + СтрокаДанных.ФИО + " уже существует.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Родитель = ЗаполнитьРодителя(СтрокаДанных,ТаблицаРодитель);
		Обучающийся = ЗаполнитьОбучающегося(СтрокаДанных,ТаблицаПриказОЗачислении,ТаблицаПриказОПереводе,Родитель,ТаблицаОбучающийся);
		Если СтрокаДанных.ЗачислениеНомерПриказа = 0 Или СтрокаДанных.ЗачислениеДатаЗаполнения = '00010101' Или СтрокаДанных.ЗачислениеКласс = Справочники.Классы.ПустаяСсылка() Тогда
			Сообщить("Строка " + СтрокаДанных.НомерСтроки + " Недостаточно данных для заполнения зачисления");
			Возврат;                                                                                          
		КонецЕсли;	
		ПриказОЗачислении = ЗаполнитьЗачисление(СтрокаДанных,ТаблицаПриказОЗачислении,Обучающийся);		
		Если СтрокаДанных.ЗачислениеНомерПриказа <> 0 И СтрокаДанных.ЗачислениеДатаЗаполнения <> '00010101' И СтрокаДанных.ПереводКласс <> Справочники.Классы.ПустаяСсылка() Тогда
			ПриказОПереводе = ЗаполнитьПеревод(СтрокаДанных,ТаблицаПриказОПереводе,Обучающийся);
		КонецЕсли;
	КонецЦикла;
	Сообщить("Данные загрузились!");	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОбучающегося(СтрокаДанных,ТаблицаПриказОЗачислении,ТаблицаПриказОПереводе,Родитель,ТаблицаОбучающийся)
	НовыйОбучающийся = Справочники.Обучающиеся.СоздатьЭлемент();
	НовыйОбучающийся.Наименование = СтрокаДанных.ФИО;
	НовыйОбучающийся.ДатаРождения = СтрокаДанных.ДатаРождения;
	НовыйОбучающийся.Пол = СтрокаДанных.Пол;
	НовыйОбучающийся.Адрес = СтрокаДанных.Адрес;
	НовыйОбучающийся.ЛичноеДело = СтрокаДанных.ЛичноеДело;
	НовыйОбучающийся.СертификатПФДО = СтрокаДанных.ПФДО;
	НовыйОбучающийся.Документ = СтрокаДанных.Документ;
	НовыйОбучающийся.ДокументСерия = СтрокаДанных.ДокументСерия;
	НовыйОбучающийся.ДокументНомер = СтрокаДанных.ДокументНомер;
	НовыйОбучающийся.ДатаВыдачиДокумента = СтрокаДанных.ДатаВыдачиДокумента;
	НовыйОбучающийся.ДокументВыдан = СтрокаДанных.ДокументВыдан;
	НовыйОбучающийся.СНИЛС = СтрокаДанных.СНИЛС;
	СтрокаРодитель = НовыйОбучающийся.Родители.Добавить();
	СтрокаРодитель.Тип = СтрокаДанных.РодительТип;
	СтрокаРодитель.Родитель = Родитель.Ссылка;
	НовыйОбучающийся.Записать();
	
	СтрокаОбучающийся = ТаблицаОбучающийся.Добавить();
	СтрокаОбучающийся.Ссылка = НовыйОбучающийся.Ссылка;
	СтрокаОбучающийся.ФИО = НовыйОбучающийся.Наименование;
	СтрокаОбучающийся.ДатаРождения = НовыйОбучающийся.ДатаРождения;
	
	Возврат НовыйОбучающийся;
КонецФункции

&НаСервере
Функция ЗаполнитьРодителя(СтрокаДанных,ТаблицаРодитель)	
	НайденныйРодитель = ТаблицаРодитель.Найти(СтрокаДанных.РодительФИО);
	Если НайденныйРодитель<>Неопределено Тогда
		Если НайденныйРодитель.ДатаРождения = СтрокаДанных.РодительДатаРождения Тогда	
			//Сообщить("Обучающийся " + СтрокаДанных.ФИО + " уже существует.");
			Возврат НайденныйРодитель.Ссылка;
		Иначе
			Сообщить("Найден родитель с таким же ФИО, но другой датой рождения, " + СтрокаДанных.ФИО);	
		КонецЕсли;
	КонецЕсли;
	
	НовыйРодитель = Справочники.Родители.СоздатьЭлемент();
	НовыйРодитель.Наименование = СтрокаДанных.РодительФИО;
	НовыйРодитель.Пол = СтрокаДанных.РодительПол;
	НовыйРодитель.Тип = СтрокаДанных.РодительТип;
	НовыйРодитель.КонтактныйТелефон = СтрокаДанных.РодительТелефон;
	НовыйРодитель.СНИЛС = СтрокаДанных.РодительСНИЛС;
	НовыйРодитель.ДокументНомер = СтрокаДанных.РодительДокументНомер;
	НовыйРодитель.ДокументСерия = СтрокаДанных.РодительДокументСерия;
	НовыйРодитель.ДокументДатаВыдачи = СтрокаДанных.РодительДокументДатаВыдачи;
	НовыйРодитель.ДокументВыдан = СтрокаДанных.РодительДокументВыдан;
	НовыйРодитель.ДатаРождения = СтрокаДанных.РодительДатаРождения;
	НовыйРодитель.Записать(); 
	
	СтрокаРодитель = ТаблицаРодитель.Добавить();
	СтрокаРодитель.Ссылка = НовыйРодитель.Ссылка;
	СтрокаРодитель.ФИО = НовыйРодитель.Наименование;
	СтрокаРодитель.ДатаРождения = НовыйРодитель.ДатаРождения;
	
	Возврат НовыйРодитель.Ссылка;
КонецФункции

&НаСервере
Функция ПолучитьНомерДокумента(Строка)
	Результат = РегулярноеВыражение("([0-9]{1,})\-([А-Яа-я])",Строка);
	Номер = Новый Структура;
	Номер.Вставить("Число",-1);
	Номер.Вставить("Литера","");
	Если Результат.Количество() <= 0 Тогда
		Попытка
			Номер.Число = Число(Строка);
		Исключение
			Номер.Число = -1;
		КонецПопытки;
		
		Возврат Номер;
	КонецЕсли;
	Если Результат[0].Количество() < 3 Тогда
		Возврат Номер;
	КонецЕсли; 
	Попытка
		Номер.Число = Число(Результат[0][1]);
		Номер.Литера = Результат[0][2];
	Исключение
		Номер.Число = -1;
		Номер.Литера = "";		
	КонецПопытки;         
	
	Возврат Номер;
		
		
КонецФункции

&НаСервере
Функция ЗаполнитьЗачисление(СтрокаДанных,ТаблицаПриказОЗачислении,Обучающийся)
	ЗачислениеНомерПриказа = ПолучитьНомерДокумента(СтрокаДанных.ЗачислениеНомерПриказа);
	
	Если ЗачислениеНомерПриказа.Число = -1 Тогда
		ВызватьИсключение("Строка " + СтрокаДанных.НомерСтроки + " Не удалось распознать номер документа");
	КонецЕсли;
	
	Отбор = Новый Структура("Номер",ЗачислениеНомерПриказа.Число);
	НайденныеДокументы = ТаблицаПриказОЗачислении.НайтиСтроки(Отбор);
	ПриказОЗачисленииСсылка = Документы.ДвижениеОбучающихся.ПустаяСсылка();
	Для Каждого СтрокаДокумент Из НайденныеДокументы Цикл
		Если Год(СтрокаДокумент.ДатаДействия) = Год(СтрокаДанных.ЗачислениеДатаЗаполнения) Тогда
			ПриказОЗачисленииСсылка = СтрокаДокумент.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//Получаем / создаем объект приказа
	ФлагСоздание = Ложь;
	Если ПриказОЗачисленииСсылка = Документы.ДвижениеОбучающихся.ПустаяСсылка() Тогда
		ФлагСоздание = Истина;
		ПриказОЗачислении = Документы.ДвижениеОбучающихся.СоздатьДокумент();
		ПриказОЗачислении.ТипДокумента = Перечисления.ТипыДвиженияОбучающегося.ПриемНаОбучение;
		ПриказОЗачислении.Номер = ЗачислениеНомерПриказа.Число;
		ПриказОЗачислении.Литера = ЗачислениеНомерПриказа.Литера;
		ПриказОЗачислении.Дата = СтрокаДанных.ЗачислениеДатаЗаполнения;
		//Если не заполнена дата действия - брать дату заполнения        
	
		Если СтрокаДанных.ЗачислениеДатаДействия = '00010101' Тогда
			ПриказОЗачислении.ДатаДействия = СтрокаДанных.ЗачислениеДатаЗаполнения;	
		Иначе 
			ПриказОЗачислении.ДатаДействия = СтрокаДанных.ЗачислениеДатаДействия;
		КонецЕсли;
		
		ПриказОЗачислении.УчебныйГод = ПолучитьУчебныйГод(ПриказОЗачислении.ДатаДействия);
		
	Иначе
		ПриказОЗачислении = ПриказОЗачисленииСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	// Проверки документа
	Отбор = Новый Структура("ФИО",Обучающийся);
	Если ПриказОЗачислении.Обучающиеся.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Сообщить("Строка " + СтрокаДанных.НомерСтроки + " Строка с таким обучающимся уже существует в приказе о зачислении " + СтрокаДанных.ФИО);
		Возврат ПриказОЗачислении;
	КонецЕсли;
	Если ПриказОЗачислении.ТипДокумента <> Перечисления.ТипыДвиженияОбучающегося.ПриемНаОбучение Тогда
		Сообщить("Строка " + СтрокаДанных.НомерСтроки + " Документ с таким номером не является приказом о зачислении");
		Возврат ПриказОЗачислении;
	КонецЕсли;                                                                                                        
	
	// Добавляем строку
	СтрокаОбучающийся = ПриказОЗачислении.Обучающиеся.Добавить();
	СтрокаОбучающийся.ФИО = Обучающийся.Ссылка;
	СтрокаОбучающийся.Класс = СтрокаДанных.ЗачислениеКласс;
	СтрокаОбучающийся.Отличник = Ложь;
	СтрокаОбучающийся.Условно = Ложь;
	
	ПриказОЗачислении.Записать(РежимЗаписиДокумента.Проведение);
	Если ФлагСоздание Тогда
		СтрокаПриказ = ТаблицаПриказОЗачислении.Добавить();
		СтрокаПриказ.Ссылка = ПриказОЗачислении.Ссылка;
		СтрокаПриказ.ТипДокумента = ПриказОЗачислении.ТипДокумента;
		СтрокаПриказ.ДатаДействия = ПриказОЗачислении.ДатаДействия;
		СтрокаПриказ.Номер = ПриказОЗачислении.Номер;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПеревод(СтрокаДанных,ТаблицаПриказОПереводе,Обучающийся)
	ПереводНомерПриказа = ПолучитьНомерДокумента(СтрокаДанных.ПереводНомерПриказа);
	
	Если ПереводНомерПриказа.Число = -1 Тогда
		ВызватьИсключение("Строка " + СтрокаДанных.НомерСтроки + " Не удалось распознать номер документа");
	КонецЕсли;
	
	Отбор = Новый Структура("Номер",ПереводНомерПриказа.Число);
	НайденныеДокументы = ТаблицаПриказОПереводе.НайтиСтроки(Отбор);
	ПриказОПереводеСсылка = Документы.ДвижениеОбучающихся.ПустаяСсылка();
	Для Каждого СтрокаДокумент Из НайденныеДокументы Цикл
		Если Год(СтрокаДокумент.ДатаДействия) = Год(СтрокаДанных.ПереводДатаЗаполнения) Тогда
			ПриказОПереводеСсылка = СтрокаДокумент.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//Получаем / создаем объект приказа
	ФлагСоздание = Ложь;
	Если ПриказОПереводеСсылка = Документы.ДвижениеОбучающихся.ПустаяСсылка() Тогда
		ФлагСоздание = Истина;
		ПриказОПереводе = Документы.ДвижениеОбучающихся.СоздатьДокумент();
		ПриказОПереводе.ТипДокумента = СтрокаДанных.ПереводТипДвижения;
		ПриказОПереводе.Номер = ПереводНомерПриказа.Число;
		ПриказОПереводе.Литера = ПереводНомерПриказа.Литера;
		ПриказОПереводе.Дата = СтрокаДанных.ПереводДатаЗаполнения;
		//Если не заполнена дата действия - брать дату заполнения
		Если СтрокаДанных.ПереводДатаДействия = '00010101' Тогда
			ПриказОПереводе.ДатаДействия = СтрокаДанных.ПереводДатаЗаполнения;	
		Иначе 
			ПриказОПереводе.ДатаДействия = СтрокаДанных.ПереводДатаДействия;
		КонецЕсли;  
		ПриказОПереводе.УчебныйГод = ПолучитьУчебныйГод(ПриказОПереводе.ДатаДействия);
	Иначе
		ПриказОПереводе = ПриказОПереводеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	// Проверки документа
	Отбор = Новый Структура("ФИО",Обучающийся);
	Если ПриказОПереводе.Обучающиеся.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Сообщить("Строка " + СтрокаДанных.НомерСтроки + " Строка с таким обучающимся уже существует в приказе о переводе " + СтрокаДанных.ФИО);
		Возврат ПриказОПереводе;
	КонецЕсли;
	Если ПриказОПереводе.ТипДокумента <> Перечисления.ТипыДвиженияОбучающегося.ПереходМеждуКлассами И ПриказОПереводе.ТипДокумента <> Перечисления.ТипыДвиженияОбучающегося.НовыйУчебныйГод Тогда
		Сообщить("Строка " + СтрокаДанных.НомерСтроки + " Документ с таким номером не является приказом о переводе");
		Возврат ПриказОПереводе;
	КонецЕсли;                                                                                                         
	
	// Добавляем строку
	СтрокаОбучающийся = ПриказОПереводе.Обучающиеся.Добавить();
	СтрокаОбучающийся.ФИО = Обучающийся.Ссылка;
	СтрокаОбучающийся.Класс = СтрокаДанных.ПереводКласс;
	СтрокаОбучающийся.Отличник = Ложь;
	СтрокаОбучающийся.Условно = Ложь;
	
	ПриказОПереводе.Записать(РежимЗаписиДокумента.Проведение);
	Если ФлагСоздание Тогда
		СтрокаПриказ = ТаблицаПриказОПереводе.Добавить();
		СтрокаПриказ.Ссылка = ПриказОПереводе.Ссылка;
		СтрокаПриказ.ТипДокумента = ПриказОПереводе.ТипДокумента;
		СтрокаПриказ.ДатаДействия = ПриказОПереводе.ДатаДействия;
		СтрокаПриказ.Номер = ПриказОПереводе.Номер;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	ПровестиДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Объект.ДанныеФайла.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУчеников(Команда)
	УдалитьУчениковНаСервере();
КонецПроцедуры      

&НаСервере
Процедура УдалитьУчениковНаСервере()
	МассивОбучающийся = Новый Массив;
	Для каждого СтрокаДанных Из Объект.ДанныеФайла Цикл
		МассивОбучающийся.Добавить(СтрокаДанных.ФИО);
	КонецЦикла;	
	МассивОбучающийся = УбратьДублиИзМассива(МассивОбучающийся);
	
	ЗапросОбучающийсяДокументы = Новый Запрос("ВЫБРАТЬ
	                                 |	Обучающиеся.Ссылка КАК Ссылка,
									 |	Обучающиеся.Наименование КАК ФИО,
	                                 |	Обучающиеся.ДатаРождения КАК ДатаРождения,
	                                 |	ДокДвижения.Ссылка КАК ДокументСсылка,
	                                 |	ДокДвижения.НомерСтроки КАК НомерСтроки
	                                 |ИЗ
	                                 |	Справочник.Обучающиеся КАК Обучающиеся
	                                 |		ПРАВОЕ СОЕДИНЕНИЕ Документ.ДвижениеОбучающихся.Обучающиеся КАК ДокДвижения
	                                 |		ПО Обучающиеся.Ссылка = ДокДвижения.ФИО
	                                 |ГДЕ
	                                 |	Обучающиеся.Наименование В(&МассивОбучающийся)");
	ЗапросОбучающийсяДокументы.УстановитьПараметр("МассивОбучающийся",МассивОбучающийся);
	ТаблицаОбучающйсяДокументы = ЗапросОбучающийсяДокументы.Выполнить().Выгрузить(); 
	
	
	ЗапросОбучающийся = Новый Запрос("ВЫБРАТЬ
	                                 |	Обучающиеся.Ссылка КАК Ссылка,
	                                 |	Обучающиеся.Наименование КАК ФИО,
	                                 |	Обучающиеся.ДатаРождения КАК ДатаРождения
	                                 |ИЗ
	                                 |	Справочник.Обучающиеся КАК Обучающиеся
	                                 |ГДЕ
	                                 |	Обучающиеся.Наименование В(&МассивОбучающийся)");
	ЗапросОбучающийся.УстановитьПараметр("МассивОбучающийся",МассивОбучающийся);
	ТаблицаОбучающийся = ЗапросОбучающийся.Выполнить().Выгрузить();
	
	Для каждого СтрокаДанных Из Объект.ДанныеФайла Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ФИО",СтрокаДанных.ФИО);
		Отбор.Вставить("ДатаРождения",СтрокаДанных.ДатаРождения);
		
		//Удаление из строк документов
		НайденныеСтроки = ТаблицаОбучающйсяДокументы.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			Документ = СтрокаТаблицы.ДокументСсылка.ПолучитьОбъект();
			Найденное = Документ.Обучающиеся.Найти(СтрокаТаблицы.Ссылка);
			Если Найденное <> Неопределено Тогда
				Инд = Документ.Обучающиеся.Индекс(Найденное);
				Документ.Обучающиеся.Удалить(Инд);
				Документ.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			Если Документ.Обучающиеся.Количество() = 0 Тогда
				Документ.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		//Удаление из справочников
		НайденныеСтроки = ТаблицаОбучающийся.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			ЭлементСправочника = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			ЭлементСправочника.Удалить();
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры
