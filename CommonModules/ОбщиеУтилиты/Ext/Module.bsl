Функция ПолучитьИнициалы(Сотрудник) Экспорт
		ФИО = Сотрудник.Наименование;
		МассивФИО = СтрРазделить(ФИО," ",Ложь);
		Если МассивФИО.Количество() < 3 Тогда
			Возврат ФИО;
		Иначе                             
			Результат = МассивФИО[0] + 
			" " + Лев(МассивФИО[1],1) + 
			"." + Лев(МассивФИО[2],1) + ".";
			Для Счетчик = 3 По МассивФИО.Количество() - 1 Цикл
				Результат = Результат + " " + МассивФИО[Счетчик];			
			КонецЦикла;                                     
			Возврат Результат;
		КонецЕсли
КонецФункции    

Функция РегулярноеВыражение(Шаблон,Текст) Экспорт
	ПодключениеВыполнено = ПодключитьВнешнююКомпоненту("ОбщийМакет.Компонент_RegExp", "RegExp", ТипВнешнейКомпоненты.Native);
	
	Если ПодключениеВыполнено Тогда
		Рег = Новый("AddIn.RegExp.RegEx");
		Рег.НайтиСовпадения(Текст,Шаблон,Истина);  
		
		Результат = Новый Массив();
		
		Пока Рег.Следующий() Цикл
			ВложеннаяГруппа = Новый Массив();     
			ВложеннаяГруппа.Добавить(Рег.ТекущееЗначение);
			Для Счетчик = 0 По Рег.КоличествоВложенныхГрупп() - 1 Цикл
				ВложеннаяГруппа.Добавить(Рег.ПолучитьПодгруппу(Счетчик));
			КонецЦикла;
		    Сообщить(Рег.ТекущееЗначение);     
			Сообщить(Рег.КоличествоВложенныхГрупп());       
			Результат.Добавить(ВложеннаяГруппа);
		КонецЦикла;                
		Возврат Результат;
	Иначе
		Сообщить("Не подключено");
	КонецЕсли;
		
	
КонецФункции

Функция РегулярноеВыражение_Old(Шаблон, Текст) Экспорт

	RegExp = Новый COMОбъект("VBScript.RegExp");
	
	//Поиск всех вхождений шаблона	
	RegExp.Global = Истина;	
	
	//Игнорировать регистр символов
	RegExp.IgnoreCase = Истина; 
	
	//Многострочный режим	
	RegExp.MultiLine = Ложь; 
	
	RegExp.Pattern = Шаблон;
	Matches = RegExp.Execute(Текст);
			
	МассивЗначений = Новый Массив();
	
	Для каждого StrMatches Из Matches Цикл		
				
		СубМассивЗначений = Новый Массив();
		СубМассивЗначений.Добавить(StrMatches.Value);
		
		Если ТипЗнч(StrMatches.SubMatches) = Тип("COMОбъект") Тогда
			
			Для каждого StrSubMatches Из StrMatches.SubMatches Цикл
				СубМассивЗначений.Добавить(StrSubMatches);	
			КонецЦикла;
									
		КонецЕсли;
		
		МассивЗначений.Добавить(СубМассивЗначений);
				
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции   


Функция УбратьДублиИзМассива(Массив) Экспорт 
	ИндексТекущегоЭлемента = 0; 
	ВсегоЭлементов = Массив.Количество(); 
	Пока ИндексТекущегоЭлемента < ВсегоЭлементов Цикл 
		ИндексСледующегоЭлемента = ИндексТекущегоЭлемента + 1; 
		Пока ИндексСледующегоЭлемента < ВсегоЭлементов Цикл 
			Если Массив[ИндексСледующегоЭлемента] = Массив[ИндексТекущегоЭлемента] Тогда 
				Массив.Удалить(ИндексСледующегоЭлемента); 
				ВсегоЭлементов = ВсегоЭлементов - 1; 
			Иначе 
				ИндексСледующегоЭлемента = ИндексСледующегоЭлемента + 1; 
			КонецЕсли; 
		КонецЦикла; 
		ИндексТекущегоЭлемента = ИндексТекущегоЭлемента + 1; 
	КонецЦикла; 
	Возврат Массив; 
КонецФункции 


Функция МесяцВСтроку(Месяц) Экспорт
	МесяцыСтроки = Новый Массив;
	МесяцыСтроки.Добавить("Январь");
	МесяцыСтроки.Добавить("Февраль");
	МесяцыСтроки.Добавить("Март");
	МесяцыСтроки.Добавить("Апрель");
	МесяцыСтроки.Добавить("Май");
	МесяцыСтроки.Добавить("Июнь");
	МесяцыСтроки.Добавить("Июль");
	МесяцыСтроки.Добавить("Август");
	МесяцыСтроки.Добавить("Сентябрь");
	МесяцыСтроки.Добавить("Октябрь");
	МесяцыСтроки.Добавить("Ноябрь");
	МесяцыСтроки.Добавить("Декабрь");
	
	Если Месяц < 1 Или Месяц > 12 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат МесяцыСтроки[Месяц-1];
	
КонецФункции       


Функция ПолучитьУчебныйГод(ДатаПоиска) Экспорт
	ЗапросУчГод = Новый Запрос("ВЫБРАТЬ
	                           |	УчебныеГода.Ссылка КАК Ссылка,
	                           |	УчебныеГода.Наименование КАК Наименование,
	                           |	УчебныеГода.Начало КАК Начало,
	                           |	УчебныеГода.Окончание КАК Окончание
	                           |ИЗ
	                           |	Справочник.УчебныеГода КАК УчебныеГода
	                           |ГДЕ
	                           |	УчебныеГода.Начало <= &Дата
	                           |	И УчебныеГода.Окончание >= &Дата");
	ЗапросУчГод.Параметры.Вставить("Дата",ДатаПоиска);
	Выборка = ЗапросУчГод.Выполнить().Выбрать();
	
	УчебныйГод = Неопределено;
	
	Если Выборка.Следующий() Тогда
		УчебныйГод = Выборка.Ссылка.ПолучитьОбъект();	
	Иначе
		НачалоТекущегоГода = НачалоДня(Дата(Год(ДатаПоиска),09,01));
		Если ДатаПоиска >= НачалоТекущегоГода Тогда // Если сентябрь - декабрь
			ЛеваяЧасть = Год(ДатаПоиска);
			ПраваяЧасть = Год(ДатаПоиска) + 1;
		Иначе // Если январь-август
			ЛеваяЧасть = Год(ДатаПоиска)-1;
			ПраваяЧасть = Год(ДатаПоиска);
		КонецЕсли;
		
		УчебныйГод = Справочники.УчебныеГода.СоздатьЭлемент();
		УчебныйГод.Наименование = Формат(ЛеваяЧасть,"ЧГ=0") + "-" + Формат(ПраваяЧасть,"ЧГ=0");
		УчебныйГод.Начало = Дата(ЛеваяЧасть,09,01);
		УчебныйГод.Окончание = Дата(ПраваяЧасть,08,31);
		УчебныйГод.Записать();
	КонецЕсли;
	
	Возврат УчебныйГод.Ссылка;

КонецФункции 

Функция ПолучитьФИО(Строка) Экспорт 
	ФИО = Новый Структура;
	ФИО.Вставить("Фамилия","");
	ФИО.Вставить("Имя","");
	ФИО.Вставить("Отчество","");
	
	Массив = СтрРазделить(Строка," ");
	Если Массив.Количество() >= 3 Тогда
		ФИО.Фамилия = Массив[0];
		ФИО.Имя = Массив[1];
		ФИО.Отчество = Массив[2];
		Для Счетчик = 3 По Массив.Количество()-1 Цикл
			ФИО.Отчество = ФИО.Отчество + " " + Массив[Счетчик];
		КонецЦикла;
	КонецЕсли;
	
	Возврат ФИО;

	
КонецФункции

Функция ПолучитьНомерПриказа(ПриказСсылка) Экспорт
	Результат = Строка(ПриказСсылка.Номер);
	Если ПриказСсылка.Литера <> "" Тогда
		Результат = Результат + "-" + ПриказСсылка.Литера;
	КонецЕсли;
	Возврат Результат;
КонецФункции     

Функция ПолучитьКлассИзСтроки(Строка) Экспорт
	Результат = РегулярноеВыражение("([0-9]{1,2}).*([А-Я])",Строка);    
	Сообщить("Рез.Кол" + Результат.Количество());
	Если Результат.Количество() < 0 Тогда
		Возврат Справочники.Классы.ПустаяСсылка();
	КонецЕсли;  
	Сообщить("Рез[0].Кол" + Результат[0].Количество());
	Если Результат[0].Количество() < 3 Тогда
		Возврат Справочники.Классы.ПустаяСсылка();
	КонецЕсли;    
	Сообщить("Ответ " + Результат[0][1] + " " + Результат[0][2]);
	ЗапросКласс = Новый Запрос("ВЫБРАТЬ
	                           |	Классы.Ссылка КАК Ссылка,
	                           |	Классы.Наименование КАК Наименование
	                           |ИЗ
	                           |	Справочник.Классы КАК Классы
	                           |ГДЕ
	                           |	Классы.Параллель.Порядок = &Параллель - 1
	                           |	И Классы.Литера = &Литера");
	НомерКласса = Число(Результат[0][1]);
	ЛитераКласса = Результат[0][2];
	ЗапросКласс.УстановитьПараметр("Параллель",НомерКласса);
	ЗапросКласс.УстановитьПараметр("Литера",ЛитераКласса);
	Класс = ЗапросКласс.Выполнить().Выбрать();
	Если Класс.Следующий() Тогда         
		Сообщить("Класс найден " + Класс.Ссылка);
		Возврат Класс.Ссылка;	
	Иначе
		Класс = Справочники.Классы.СоздатьЭлемент();
		Класс.Наименование = Строка(НомерКласса) + " «" + ЛитераКласса +"»";
		Класс.Литера = ЛитераКласса;             
		Класс.Параллель = Перечисления.Параллели[НомерКласса-1];
		Класс.Записать();
		
		Сообщить("Класс создан " + Класс.Ссылка);
		Возврат Класс.Ссылка;
	КонецЕсли;
КонецФункции

